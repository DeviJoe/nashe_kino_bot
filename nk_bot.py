import json
import datetime
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.types import ParseMode, ContentType
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import config
import keyboards
from config import TOKEN
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from keyboards import main_keyboard, reg_keyboard
import database

bot = Bot(token=TOKEN)
state = MemoryStorage()
dp = Dispatcher(bot, storage=state)


class Message(StatesGroup):
    waiting_company = State()
    waiting_msg = State()
    waiting_private_msg = State()


@dp.message_handler(commands=['start'])
async def process_start_command(msg: types.Message):
    if not database.if_user_in_users(msg.from_user.username):
        await msg.answer("–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å", reply_markup=reg_keyboard())
    else:
        await msg.answer('–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã', reply_markup=main_keyboard())


async def logout(msg: types.Message):
    username = msg.from_user.id
    database.delete_user(username)
    await msg.answer("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!", reply_markup=reg_keyboard())


async def table(msg: types.Message):
    try:
        date = datetime.datetime.now()
        day = str(date.day)
        f = open(f'{config.TABLES_DIR}\\{day}.md', 'r', encoding='utf-8')
        text = f.read()
        # print(text)
        f.close()
        await msg.answer(text, parse_mode=ParseMode.MARKDOWN)
    except:
        await msg.answer(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day} –∞–≤–≥—É—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ :(")


async def profile_data(msg: types.Message):
    username = msg.from_user.id
    user = ''
    if msg.from_user.first_name is not None:
        user += str(msg.from_user.first_name)
    user += ' '
    if msg.from_user.last_name is not None:
        user += str(msg.from_user.last_name)
    team = database.get_team_by_chat_id(username)
    score = database.get_money(team)

    if team <= 6:
        ans = f'''
*======== PROFILE ========\n*
–í–∞—à–µ –∏–º—è: {user}
–í–∞—à TELEGRAM ID: {username}
–ö–æ–º–ø–∞–Ω–∏—è ‚Ññ{team}
–°—á–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏: {score} –∫–∞–¥—Ä–∏–∫–æ–≤
        '''
        kb = keyboards.main_keyboard()
    else:
        ans = f'''
*======== PROFILE ========\n*
–í–∞—à–µ –∏–º—è: {user}
–í–∞—à TELEGRAM ID: {username}
–í—ã –≤–æ–∂–∞—Ç—ã–π :) 
        '''
        kb = keyboards.voz_kb()
    await msg.answer(ans, parse_mode=ParseMode.MARKDOWN, reply_markup=kb)


async def scoreboard(msg: types.Message):
    username = msg.from_user.id
    team_num = database.get_team_by_chat_id(username)
    if team_num is None:
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –∫–æ–º–∞–Ω–¥—ã!")
    else:
        places = ['ü•á', 'ü•à', 'ü•â']
        you_pointer = '‚óÄÔ∏è'
        sb = database.get_money_scoreboard()
        answer = '*======= SCOREBOARD =======*\n\n'
        for i, record in enumerate(sb):
            rec = str(i + 1) + ') –ö–æ–º–ø–∞–Ω–∏—è ‚Ññ' + str(record['team_id']) + ' - ' + str(record['money']) + ' –∫–∞–¥—Ä–∏–∫–æ–≤'
            if 0 <= i <= 2:
                rec += places[i]
            if record['team_id'] == database.get_team_by_chat_id(   username):
                rec = '*' + rec + '*' + you_pointer
            rec += '\n'
            answer += rec
        await msg.answer(answer, parse_mode=ParseMode.MARKDOWN)


async def activity(msg: types.Message):
    try:
        date = datetime.datetime.now()
        day = str(date.day)
        f = open(f'{config.ACTIVITIES_DIR}\\{day}.json', 'r', encoding='utf-8')
        text = json.load(f)['text']
        await msg.answer(text, parse_mode=ParseMode.MARKDOWN)
    except:
        await msg.answer("–î–Ω–µ–≤–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç :(")


@dp.message_handler(regexp='token_[0-9a-zA-z]{8}$')
async def reg_token(msg: types.Message):
    username = msg.from_user.id
    token = msg.text
    if database.if_user_in_users(username) and database.if_token_valid(token):
        await msg.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ \"—Ä–∞–∑–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è\" –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")
    else:
        user = ''
        if msg.from_user.first_name is not None:
            user += str(msg.from_user.first_name)
        user += ' '
        if msg.from_user.last_name is not None:
            user += str(msg.from_user.last_name)
        if database.reg_user(msg.from_user.username, token, msg.from_user.id, user):
            await msg.answer('''
            *–ü–û–ó–î–†–ê–í–õ–Ø–ï–ú!* \n–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å! –í–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è ‚Ññ{}
            '''.format(database.get_team_by_chat_id(username)), parse_mode=ParseMode.MARKDOWN,
                             reply_markup=main_keyboard())
            if msg.from_user.id in config.ADMINS or msg.from_user.username in config.ADMINS:
                await msg.answer("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –ø–æ–ª–Ω–æ–º–æ—á–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            if database.get_team_by_chat_id(msg.from_user.id) == 7:
                await msg.answer("–ü–æ–¥—Ç–≤–µ—Ä–∂–µ–Ω—ã –ø–æ–ª–Ω–æ–º–æ—á–∏—è –≤–æ–∂–∞—Ç–æ–≥–æ!", reply_markup=keyboards.voz_kb())
        else:
            await msg.answer("–¢–æ–∫–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")


@dp.message_handler(commands=['echo', 'private'], state='*')
async def spam(msg: types.Message):
    if not database.get_team_by_chat_id(msg.from_user.id):
        await msg.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –í–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏")
        return
    if not database.get_team_by_chat_id(msg.from_user.id):
        await msg.answer("–í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É!")
        return
    if msg.from_user.id in config.ADMINS or msg.from_user.username in config.ADMINS:
        if msg.text == '/echo':
            await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã")
            await Message.waiting_msg.set()
        if msg.text == '/private':
            await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ü–†–ò–í–ê–¢–ù–û–ô —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã")
            await Message.waiting_private_msg.set()
    else:
        await msg.answer("–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ –≤—ã –Ω–µ –≤ –≥—Ä—É–ø–ø–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ :)")


@dp.message_handler(commands=['cancel'], state=Message.waiting_msg)
async def cancel_broadcast(msg: types.Message, state: FSMContext):
    await state.finish()
    await msg.answer('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞')


@dp.message_handler(commands=['cancel'], state=Message.waiting_private_msg)
async def cancel_broadcast(msg: types.Message, state: FSMContext):
    await state.finish()
    await msg.answer('–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞')


@dp.message_handler(state=Message.waiting_msg)
async def broadcast(msg: types.Message, state: FSMContext):
    for user in database.get_users():
        await bot.send_message(user, msg.html_text, parse_mode=ParseMode.HTML)
    await state.finish()


@dp.message_handler(state=Message.waiting_private_msg)
async def private_broadcast(msg: types.Message, state: FSMContext):
    for user in database.get_users():
        if database.get_team_by_chat_id(user) == 7:
            await bot.send_message(user, msg.html_text, parse_mode=ParseMode.HTML)
    await state.finish()


@dp.message_handler(commands=['update'])
async def update_money(msg: types.Message):
    if not database.get_team_by_chat_id(msg.from_user.id):
        await msg.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –í–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏")
        return
    try:
        if msg.from_user.username in config.ADMINS:
            args = msg.get_args().split(' ')
            if len(args) == 2:
                team_num = int(args[0])
                money = int(args[1])
                database.set_money(team_num, money)
                await msg.answer("–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            elif len(args) == 3:
                team_num = int(args[0])
                sign = args[1]
                money = int(args[2])
                if sign == '+':
                    database.set_money(team_num, database.get_money(team_num) + money)
                    await msg.answer("–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
                elif sign == '-':
                    database.set_money(team_num, database.get_money(team_num) - money)
                    await msg.answer("–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
                else:
                    await msg.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ–ø–µ—Ä–∞–Ω–¥')
            else:
                await msg.answer("–û—à–∏–±–∫–∞ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
        else:
            await msg.answer("–í—ã –Ω–µ –≤—Ö–æ–¥–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–æ–≤ :)")
    except:
        await msg.answer('–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞!')


@dp.message_handler(commands=['reset'])
async def reset_money(msg: types.Message):
    if not database.get_team_by_chat_id(msg.from_user.id):
        await msg.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –í–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏")
        return
    if msg.from_user.username in config.ADMINS or msg.from_user.id in config.ADMINS:
        for i in range(1, 7):
            database.set_money(i, 0)
        await msg.answer("–í—Å–µ —Å—á–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã!")
    else:
        await msg.answer("–í—ã –Ω–µ –≤—Ö–æ–¥–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–æ–≤ :)")


@dp.message_handler(commands=['admin'])
async def get_admin_cap(msg: types.Message):
    if msg.from_user.username in config.ADMINS or msg.from_user.id in config.ADMINS:
        await msg.answer("–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º!")
    else:
        await msg.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º!")


async def tel(msg: types.Message):
    if database.get_team_by_chat_id(msg.from_user.id) == 7:
        f = open('tel.md', 'r', encoding='utf-8')
        telephones = f.read()
        f.close()
        await msg.answer(telephones, parse_mode=ParseMode.MARKDOWN)
    else:
        await msg.answer("–í—ã –Ω–µ –≤–æ–∂–∞—Ç—ã–π, —è –≤—Å–µ –≤–∏–∂—É :(")
    pass


@dp.message_handler(content_types=ContentType.TEXT)
async def handler(msg: types.Message):
    username = msg.from_user.id
    if not database.if_user_in_users(username):
        if msg.text.lower() == '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è':
            await msg.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
        else:
            await msg.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –í–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏")
    else:
        if msg.text.lower() == '—Ä–∞–∑–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è':
            await logout(msg)
        elif msg.text.lower() == '–ø—Ä–æ—Ñ–∏–ª—å':
            await profile_data(msg)
        elif msg.text.lower() == '—Ä–µ–π—Ç–∏–Ω–≥':
            await scoreboard(msg)
        elif msg.text.lower() == '–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–Ω—è':
            await activity(msg)
        elif msg.text.lower() == '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
            await table(msg)
        elif msg.text.lower() == '—Ç–µ–ª–µ—Ñ–æ–Ω—ã/—Ä–∞—Å—Å–µ–ª–µ–Ω–∏–µ':
            await tel(msg)

if __name__ == '__main__':
    executor.start_polling(dp)
